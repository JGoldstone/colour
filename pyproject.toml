[project]
name = "colour-science"
version = "0.4.6"
description = "Colour Science for Python"
readme = "README.rst"
requires-python = ">=3.10,<3.14"
authors = [
    { name = "Colour Developers", email = "colour-developers@colour-science.org" },
]
maintainers = [
    { name = "Colour Developers", email = "colour-developers@colour-science.org" }
]
license = { text = "BSD-3-Clause" }
keywords = [
    "color",
    "color-science",
    "color-space",
    "color-spaces",
    "colorspace",
    "colorspaces",
    "colour",
    "colour-science",
    "colour-space",
    "colour-spaces",
    "colourspace",
    "colourspaces",
    "data",
    "dataset",
    "datasets",
    "python",
    "spectral-data",
    "spectral-dataset",
    "spectral-datasets",
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved",
    "Natural Language :: English",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Topic :: Scientific/Engineering",
    "Topic :: Software Development",
]
dependencies = [
    "imageio>=2,<3",
    "numpy>=1.24,<3",
    "scipy>=1.10,<2",
    "typing-extensions>=4,<5",
]

[project.optional-dependencies]
optional = [
    "matplotlib>=3.7",
    "networkx>=3,<4",
    "opencolorio>=2,<3",
    "pandas>=2,<3",
    "pydot>=3,<4",
    "tqdm>=4,<5",
    "xxhash>=3,<4",
]
docs = [
    "biblib-simple",
    "pydata-sphinx-theme",
    "restructuredtext-lint",
    "sphinx",
    "sphinxcontrib-bibtex",
]
meshing = [
    "trimesh>=4,<5",
]

[project.urls]
Homepage = "https://www.colour-science.org"
Documentation = "https://colour.readthedocs.org"
Repository = "https://github.com/colour-science/colour"
Issues = "https://github.com/colour-science/colour/issues"
Changelog = "https://github.com/colour-science/colour/releases"

[tool.uv]
package = true
dev-dependencies = [
    "coverage",
    "coveralls",
    "hatch",
    "invoke",
    "jupyter",
    "pre-commit",
    "pyright",
    "pytest",
    "pytest-cov",
    "pytest-xdist",
    "toml",
    "twine",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = [ "colour" ]

[tool.codespell]
ignore-words-list = "co-ordinates,exitance,hart,ist,rIn,socio-economic"
skip = "BIBLIOGRAPHY.bib,CONTRIBUTORS.rst"

[tool.isort]
ensure_newline_before_comments = true
force_grid_wrap = 0
include_trailing_comma = true
line_length = 88
multi_line_output = 3
split_on_trailing_comma = true
use_parentheses = true

[tool.pyright]
reportMissingImports = false
reportMissingModuleSource = false
reportUnboundVariable = false
reportUnnecessaryCast = true
reportUnnecessaryTypeIgnorComment = true
reportUnsupportedDunderAll = false
reportUnusedExpression = false

[tool.pytest.ini_options]
addopts = "-n auto --dist=loadscope --durations=5"
filterwarnings = [
    "ignore::RuntimeWarning",
    "ignore::pytest.PytestCollectionWarning",
    "ignore::colour.utilities.ColourWarning",
    "ignore::colour.utilities.ColourRuntimeWarning",
    "ignore::colour.utilities.ColourUsageWarning",
    "ignore:Implicit None on return values is deprecated:DeprecationWarning",
    "ignore:Jupyter is migrating its paths:DeprecationWarning",
    "ignore:the imp module is deprecated:DeprecationWarning",
    "ignore:Method Nelder-Mead does not use gradient information:RuntimeWarning",
    "ignore:More than 20 figures have been opened:RuntimeWarning",
    "ignore:divide by zero encountered:RuntimeWarning",
    "ignore:invalid value encountered in:RuntimeWarning",
    "ignore:overflow encountered in:RuntimeWarning",
    "ignore:Matplotlib is currently using agg:UserWarning",
    "ignore:override the edgecolor or facecolor properties:UserWarning",
]

[tool.ruff]
target-version = "py310"
line-length = 88
select = [
    "A", # flake8-builtins
    "ARG", # flake8-unused-arguments
    "ANN", # flake8-annotations
    "ASYNC", # flake8-async
    "B", # flake8-bugbear
    "BLE", # flake8-blind-except
    "C4", # flake8-comprehensions
    # "C90", # mccabe
    # "COM", # flake8-commas
    "CPY", # flake8-copyright
    "DTZ", # flake8-datetimez
    "D", # pydocstyle
    "E", # pydocstyle
    # "ERA", # eradicate
    "EM", # flake8-errmsg
    "EXE", # flake8-executable
    "F", # flake8
    "FA", # flake8-future-annotations
    # "FBT", # flake8-boolean-trap
    "G", # flake8-logging-format
    "I", # isort
    "ICN", # flake8-import-conventions
    "INP", # flake8-no-pep420
    "INT", # flake8-gettext
    "ISC", # flake8-implicit-str-concat
    "LOG", # flake8-logging
    "N", # pep8-naming
    "PD", # pandas-vet
    "PIE", # flake8-pie
    "PGH", # pygrep-hooks
    "PL", # pylint
    # "PT", # flake8-pytest-style
    # "PTH", # flake8-use-pathlib [Enable]
    "PYI", # flake8-pyi
    "Q", # flake8-quotes
    "RET", # flake8-return
    "RSE", # flake8-raise
    "RUF", # Ruff
    "S", # flake8-bandit
    "SLF", # flake8-self
    "SLOT", # flake8-slots
    "SIM", # flake8-simplify
    "T10", # flake8-debugger
    "T20", # flake8-print
    "TC", # flake8-type-checking
    "TID", # flake8-tidy-imports
    "TRY", # tryceratops
    "UP", # pyupgrade
    "W", # pydocstyle
    "YTT", # flake8-2020
]
ignore = [
    "ANN401", # Dynamically typed expressions (typing.Any) are disallowed in `**kwargs`
    "D200", # One-line docstring should fit on one line
    "D202", # No blank lines allowed after function docstring
    "D205", # 1 blank line required between summary line and description
    "D301", # Use `r"""` if any backslashes in a docstring
    "D400", # First line should end with a period
    "I001", # Import block is un-sorted or un-formatted
    "N801", # Class name `.*` should use CapWords convention
    "N802", # Function name `.*` should be lowercase
    "N803", # Argument name `.*` should be lowercase
    "N806", # Variable `.*` in function should be lowercase
    "N813", # Camelcase `.*` imported as lowercase `.*`
    "N815", # Variable `.*` in class scope should not be mixedCase
    "N816", # Variable `.*` in global scope should not be mixedCase
    "PGH003", # Use specific rule codes when ignoring type issues
    "PLR0912", # Too many branches
    "PLR0913", # Too many arguments in function definition
    "PLR0915", # Too many statements
    "PLR2004", # Magic value used in comparison, consider replacing `.*` with a constant variable
    "PYI036", # Star-args in `.*` should be annotated with `object`
    "PYI051", # `Literal[".*"]` is redundant in a union with `str`
    "PYI056", # Calling `.append()` on `__all__` may not be supported by all type checkers (use `+=` instead)
    "RUF022", # [*] `__all__` is not sorted
    "TRY003", # Avoid specifying long messages outside the exception class
    "UP038", #  Use `X | Y` in `isinstance` call instead of `(X, Y)`
]
typing-modules = ["colour.hints"]

[tool.ruff.pydocstyle]
convention = "numpy"

[tool.ruff.per-file-ignores]
"__init__.py" = ["D104"]
"colour/examples/*" = ["INP", "T201", "T203"]
"docs/*" = ["INP"]
"tasks.py" = ["INP"]
"test_*" = ["S101"]
"utilities/*" = ["EXE001", "INP"]
"utilities/unicode_to_ascii.py" = ["RUF001"]

[tool.ruff.format]
docstring-code-format = true
